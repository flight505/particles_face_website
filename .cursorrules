You are an expert in React, Vite, Tailwind CSS, three.js, GSAP, Next UI and React Three Fiber.

CURRENT TASK <Sep 16 2024 23:45:00>
Enhancing the 3D Face Animation Effect.
We have implemented the core functionality and are now adding advanced visual effects and particle movement.

PROJECT UNDERSTANDING
Completed Features:
  Scene Setup:
    - Camera & Renderer: Basic Three.js environment is set up and functioning.
    - Particle System: Particles are displayed on the scene with a U-progress animation initiating the scene.
  Assets:
    - Sprite Sheets: sprite1.jpg (looking left) and sprite2.jpg (looking right) are implemented and working, both grayscale.
    - Displacement Map: Sprite sheets are successfully used as displacement maps, displacing particles along the Z-axis based on brightness.
  Interactivity:
    - Mouse Interaction: Mouse movements successfully affect the direction the face is looking at.
  Visual Design:
    - Color Scheme: Maintaining a black and white aesthetic.
    - Blending: AdditiveBlending has been added to enhance particle visuals.
    - Bloom Effect: UnrealBloomPass has been implemented for bloom effects.

In Progress Features:
  - Chromatic Aberration: Currently adding ChromaticAberrationEffect to enhance visual appeal.

Upcoming Features:
  - Particle Movement: Planning to add dynamic movement to particles so they are not static.

Development Environment:
  - Tools: Using Vite for bundling, with a well-organized folder structure.
  - Dependencies: Three.js, GSAP, lil-gui, and others are included as per package.json.

KEY PRINCIPLES
  - Write concise, technical responses with accurate three.js examples.
  - Use functional, declarative programming. Avoid classes.
  - Prefer iteration and modularization over duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading).
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.
  - Use the Receive an Object, Return an Object (RORO) pattern.

JAVASCRIPT GUIDELINES
  - Use "function" keyword for pure functions. Omit semicolons.
  - Use TypeScript for all code. Prefer interfaces over types. Avoid enums, use maps.
  - File structure: Exported component, subcomponents, helpers, static content, types.
  - Avoid unnecessary curly braces in conditional statements.
  - For single-line statements in conditionals, omit curly braces.
  - Use concise, one-line syntax for simple conditional statements (e.g., if (condition) doSomething()).

ERROR HANDLING
  - Prioritize error handling and edge cases.
  - Handle errors and edge cases at the beginning of functions.
  - Use early returns for error conditions to avoid deeply nested if statements.
  - Place the happy path last in the function for improved readability.
  - Avoid unnecessary else statements; use if-return pattern instead.
  - Use guard clauses to handle preconditions and invalid states early.
  - Implement proper error logging and user-friendly error messages.
  - Consider using custom error types or error factories for consistent error handling.

REACT GUIDELINES
  - Use functional components and interfaces.
  - Use declarative JSX.
  - Use function, not const, for components.
  - Use Next UI, and Tailwind CSS for components and styling.
  - Implement responsive design with Tailwind CSS.
  - Implement responsive design.
  - Place static content and interfaces at file end.
  - Use content variables for static content outside render functions.
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: WebP format, size data, lazy loading.
  - Model expected errors as return values: Avoid using try/catch for expected errors in Server Actions. Use useActionState to manage these errors and return them to the client.
  - Use error boundaries for unexpected errors: Implement error boundaries using error.tsx and global-error.tsx files to handle unexpected errors and provide a fallback UI.
  - Use useActionState with react-hook-form for form validation.
  - Always throw user-friendly errors that tanStackQuery can catch and show to the user.

FOLDER STRUCTURE
.
├── output.txt
├── package-lock.json
├── package.json
├── src
│   ├── index.html
│   ├── js
│   │   ├── components
│   │   ├── glsl
│   │   ├── index.js
│   │   ├── managers
│   │   └── utils
│   ├── public
│   │   └── img
│   └── scss
│       ├── components
│       ├── imports
│       ├── includes
│       └── style.scss
└── vite.config.js